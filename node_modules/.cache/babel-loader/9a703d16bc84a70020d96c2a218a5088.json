{"ast":null,"code":"import { useRef, useState, useCallback, useEffect } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar useLatest = function useLatest(val) {\n  var ref = useRef(val);\n  ref.current = val;\n  return ref;\n};\n\nvar _debounce = function _debounce(fn, delay) {\n  var timer; // eslint-disable-next-line func-names\n\n  return function () {\n    var _this = this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (timer !== null) {\n      clearTimeout(timer);\n      timer = null;\n    }\n\n    timer = setTimeout(function () {\n      return fn.apply(_this, args);\n    }, delay);\n  };\n};\n\nvar loadApiErr = \"ðŸ’¡ use-places-autocomplete: Google Maps Places API library must be loaded. See: https://github.com/wellyshen/use-places-autocomplete#load-the-library\";\n\nvar usePlacesAutocomplete = function usePlacesAutocomplete(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      requestOptions = _ref.requestOptions,\n      _ref$debounce = _ref.debounce,\n      debounce = _ref$debounce === void 0 ? 200 : _ref$debounce,\n      _ref$cache = _ref.cache,\n      cache = _ref$cache === void 0 ? 24 * 60 * 60 : _ref$cache,\n      _ref$cacheKey = _ref.cacheKey,\n      cacheKey = _ref$cacheKey === void 0 ? \"upa\" : _ref$cacheKey,\n      googleMaps = _ref.googleMaps,\n      callbackName = _ref.callbackName,\n      _ref$defaultValue = _ref.defaultValue,\n      defaultValue = _ref$defaultValue === void 0 ? \"\" : _ref$defaultValue,\n      _ref$initOnMount = _ref.initOnMount,\n      initOnMount = _ref$initOnMount === void 0 ? true : _ref$initOnMount;\n\n  var _useState = useState(false),\n      ready = _useState[0],\n      setReady = _useState[1];\n\n  var _useState2 = useState(defaultValue),\n      value = _useState2[0],\n      setVal = _useState2[1];\n\n  var _useState3 = useState({\n    loading: false,\n    status: \"\",\n    data: []\n  }),\n      suggestions = _useState3[0],\n      setSuggestions = _useState3[1];\n\n  var asRef = useRef();\n  var requestOptionsRef = useLatest(requestOptions);\n  var googleMapsRef = useLatest(googleMaps);\n  var init = useCallback(function () {\n    var _google$maps;\n\n    if (asRef.current) return;\n    var _window = window,\n        google = _window.google;\n    var gMaps = googleMapsRef.current;\n    var placesLib = (gMaps == null ? void 0 : gMaps.places) || (google == null ? void 0 : (_google$maps = google.maps) == null ? void 0 : _google$maps.places);\n\n    if (!placesLib) {\n      console.error(loadApiErr);\n      return;\n    }\n\n    asRef.current = new placesLib.AutocompleteService();\n    setReady(true);\n  }, [googleMapsRef]);\n  var clearSuggestions = useCallback(function () {\n    setSuggestions({\n      loading: false,\n      status: \"\",\n      data: []\n    });\n  }, []);\n  var clearCache = useCallback(function (key) {\n    if (key === void 0) {\n      key = cacheKey;\n    }\n\n    try {\n      sessionStorage.removeItem(key);\n    } catch (error) {// Skip exception\n    }\n  }, [cacheKey]); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  var fetchPredictions = useCallback(_debounce(function (val) {\n    var _asRef$current;\n\n    if (!val) {\n      clearSuggestions();\n      return;\n    }\n\n    setSuggestions(function (prevState) {\n      return _extends({}, prevState, {\n        loading: true\n      });\n    });\n    var cachedData = {};\n\n    try {\n      cachedData = JSON.parse(sessionStorage.getItem(cacheKey) || \"{}\");\n    } catch (error) {// Skip exception\n    }\n\n    if (cache) {\n      cachedData = Object.keys(cachedData).reduce(function (acc, key) {\n        if (cachedData[key].maxAge - Date.now() >= 0) acc[key] = cachedData[key];\n        return acc;\n      }, {});\n\n      if (cachedData[val]) {\n        setSuggestions({\n          loading: false,\n          status: \"OK\",\n          data: cachedData[val].data\n        });\n        return;\n      }\n    }\n\n    (_asRef$current = asRef.current) == null ? void 0 : _asRef$current.getPlacePredictions(_extends({}, requestOptionsRef.current, {\n      input: val\n    }), function (data, status) {\n      setSuggestions({\n        loading: false,\n        status: status,\n        data: data || []\n      });\n\n      if (cache && status === \"OK\") {\n        cachedData[val] = {\n          data: data,\n          maxAge: Date.now() + cache * 1000\n        };\n\n        try {\n          sessionStorage.setItem(cacheKey, JSON.stringify(cachedData));\n        } catch (error) {// Skip exception\n        }\n      }\n    });\n  }, debounce), [cache, cacheKey, clearSuggestions, requestOptionsRef]);\n  var setValue = useCallback(function (val, shouldFetchData) {\n    if (shouldFetchData === void 0) {\n      shouldFetchData = true;\n    }\n\n    setVal(val);\n    if (asRef.current && shouldFetchData) fetchPredictions(val);\n  }, [fetchPredictions]);\n  useEffect(function () {\n    if (!initOnMount) return function () {\n      return null;\n    };\n    var _window2 = window,\n        google = _window2.google;\n\n    if (!googleMapsRef.current && !(google != null && google.maps) && callbackName) {\n      window[callbackName] = init;\n    } else {\n      init();\n    }\n\n    return function () {\n      // @ts-ignore\n      if (window[callbackName]) delete window[callbackName];\n    };\n  }, [callbackName, googleMapsRef, init, initOnMount]);\n  return {\n    ready: ready,\n    value: value,\n    suggestions: suggestions,\n    setValue: setValue,\n    clearSuggestions: clearSuggestions,\n    clearCache: clearCache,\n    init: init\n  };\n};\n/* eslint-disable compat/compat */\n\n\nvar geocodeErr = \"ðŸ’¡ use-places-autocomplete: Please provide an address when using getGeocode() with the componentRestrictions.\";\n\nvar getGeocode = function getGeocode(args) {\n  var geocoder = new window.google.maps.Geocoder();\n  return new Promise(function (resolve, reject) {\n    geocoder.geocode(args, function (results, status) {\n      if (status !== \"OK\") reject(status);\n\n      if (!args.address && args.componentRestrictions) {\n        console.error(geocodeErr);\n        resolve(results);\n      }\n\n      resolve(results);\n    });\n  });\n};\n\nvar getLatLng = function getLatLng(result) {\n  var _result$geometry$loca = result.geometry.location,\n      lat = _result$geometry$loca.lat,\n      lng = _result$geometry$loca.lng;\n  return {\n    lat: lat(),\n    lng: lng()\n  };\n};\n\nvar getZipCode = function getZipCode(result, useShortName) {\n  var foundZip = result.address_components.find(function (_ref) {\n    var types = _ref.types;\n    return types.includes(\"postal_code\");\n  });\n  if (!foundZip) return undefined;\n  return useShortName ? foundZip.short_name : foundZip.long_name;\n};\n\nvar getDetailsErr = \"ðŸ’¡ use-places-autocomplete: Please provide a place Id when using getDetails() either as a string or as part of an Autocomplete Prediction.\";\n\nvar getDetails = function getDetails(args) {\n  var PlacesService = new window.google.maps.places.PlacesService(document.createElement(\"div\"));\n\n  if (!args.placeId) {\n    console.error(getDetailsErr);\n    return Promise.reject(getDetailsErr);\n  }\n\n  return new Promise(function (resolve, reject) {\n    PlacesService.getDetails(args, function (results, status) {\n      if (status !== \"OK\") reject(status);\n      resolve(results);\n    });\n  });\n};\n\nexport { usePlacesAutocomplete as default, getDetails, getGeocode, getLatLng, getZipCode };","map":{"version":3,"mappings":"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","names":["useLatest","val","ref","useRef","current","_debounce","fn","delay","timer","args","arguments","clearTimeout","setTimeout","apply","_this","loadApiErr","usePlacesAutocomplete","_temp","requestOptions","debounce","cache","cacheKey","googleMaps","callbackName","defaultValue","initOnMount","useState","ready","setReady","value","setVal","loading","status","data","suggestions","setSuggestions","asRef","requestOptionsRef","googleMapsRef","init","useCallback","window","google","gMaps","placesLib","places","maps","_google$maps","console","error","AutocompleteService","clearSuggestions","clearCache","key","sessionStorage","removeItem","fetchPredictions","prevState","cachedData","JSON","parse","getItem","Object","keys","reduce","acc","maxAge","Date","now","getPlacePredictions","input","setItem","stringify","setValue","shouldFetchData","useEffect","geocodeErr","getGeocode","geocoder","Geocoder","Promise","resolve","reject","geocode","results","address","componentRestrictions","getLatLng","result","geometry","location","lat","lng","getZipCode","useShortName","foundZip","address_components","find","types","includes","undefined","short_name","long_name","getDetailsErr","getDetails","PlacesService","document","createElement","placeId"],"sources":["C:\\Users\\jeanl\\Documents\\bus-stops-app\\maps-app\\node_modules\\use-places-autocomplete\\src\\useLatest.ts","C:\\Users\\jeanl\\Documents\\bus-stops-app\\maps-app\\node_modules\\use-places-autocomplete\\src\\debounce.ts","C:\\Users\\jeanl\\Documents\\bus-stops-app\\maps-app\\node_modules\\use-places-autocomplete\\src\\usePlacesAutocomplete.ts","C:\\Users\\jeanl\\Documents\\bus-stops-app\\maps-app\\node_modules\\use-places-autocomplete\\src\\utils.ts"],"sourcesContent":["import type { RefObject } from \"react\";\nimport { useRef } from \"react\";\n\nexport default <T>(val: T): RefObject<T> => {\n  const ref = useRef(val);\n  ref.current = val;\n  return ref;\n};\n","export default <F extends (...args: any[]) => void>(\n  fn: F,\n  delay: number\n): ((this: ThisParameterType<F>, ...args: Parameters<F>) => void) => {\n  let timer: ReturnType<typeof setTimeout> | null;\n\n  // eslint-disable-next-line func-names\n  return function (this: ThisParameterType<F>, ...args: Parameters<F>) {\n    if (timer !== null) {\n      clearTimeout(timer);\n      timer = null;\n    }\n\n    timer = setTimeout(() => fn.apply(this, args), delay);\n  };\n};\n","import { useState, useRef, useCallback, useEffect } from \"react\";\n\nimport useLatest from \"./useLatest\";\nimport _debounce from \"./debounce\";\n\nexport interface HookArgs {\n  requestOptions?: Omit<google.maps.places.AutocompletionRequest, \"input\">;\n  debounce?: number;\n  cache?: number | false;\n  cacheKey?: string;\n  googleMaps?: any;\n  callbackName?: string;\n  defaultValue?: string;\n  initOnMount?: boolean;\n}\n\ntype Suggestion = google.maps.places.AutocompletePrediction;\n\ntype Status = `${google.maps.places.PlacesServiceStatus}` | \"\";\n\ninterface Suggestions {\n  readonly loading: boolean;\n  readonly status: Status;\n  data: Suggestion[];\n}\n\ninterface SetValue {\n  (val: string, shouldFetchData?: boolean): void;\n}\n\ninterface HookReturn {\n  ready: boolean;\n  value: string;\n  suggestions: Suggestions;\n  setValue: SetValue;\n  clearSuggestions: () => void;\n  clearCache: (key?: string) => void;\n  init: () => void;\n}\n\nexport const loadApiErr =\n  \"ðŸ’¡ use-places-autocomplete: Google Maps Places API library must be loaded. See: https://github.com/wellyshen/use-places-autocomplete#load-the-library\";\n\nconst usePlacesAutocomplete = ({\n  requestOptions,\n  debounce = 200,\n  cache = 24 * 60 * 60,\n  cacheKey = \"upa\",\n  googleMaps,\n  callbackName,\n  defaultValue = \"\",\n  initOnMount = true,\n}: HookArgs = {}): HookReturn => {\n  const [ready, setReady] = useState(false);\n  const [value, setVal] = useState(defaultValue);\n  const [suggestions, setSuggestions] = useState<Suggestions>({\n    loading: false,\n    status: \"\",\n    data: [],\n  });\n  const asRef = useRef<google.maps.places.AutocompleteService>();\n  const requestOptionsRef = useLatest(requestOptions);\n  const googleMapsRef = useLatest(googleMaps);\n\n  const init = useCallback(() => {\n    if (asRef.current) return;\n\n    const { google } = window;\n    const { current: gMaps } = googleMapsRef;\n    const placesLib = gMaps?.places || google?.maps?.places;\n\n    if (!placesLib) {\n      console.error(loadApiErr);\n      return;\n    }\n\n    asRef.current = new placesLib.AutocompleteService();\n    setReady(true);\n  }, [googleMapsRef]);\n\n  const clearSuggestions = useCallback(() => {\n    setSuggestions({ loading: false, status: \"\", data: [] });\n  }, []);\n\n  const clearCache = useCallback(\n    (key = cacheKey) => {\n      try {\n        sessionStorage.removeItem(key);\n      } catch (error) {\n        // Skip exception\n      }\n    },\n    [cacheKey]\n  );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const fetchPredictions = useCallback(\n    _debounce((val: string) => {\n      if (!val) {\n        clearSuggestions();\n        return;\n      }\n\n      setSuggestions((prevState) => ({ ...prevState, loading: true }));\n\n      let cachedData: Record<string, { data: Suggestion[]; maxAge: number }> =\n        {};\n\n      try {\n        cachedData = JSON.parse(sessionStorage.getItem(cacheKey) || \"{}\");\n      } catch (error) {\n        // Skip exception\n      }\n\n      if (cache) {\n        cachedData = Object.keys(cachedData).reduce(\n          (acc: typeof cachedData, key) => {\n            if (cachedData[key].maxAge - Date.now() >= 0)\n              acc[key] = cachedData[key];\n            return acc;\n          },\n          {}\n        );\n\n        if (cachedData[val]) {\n          setSuggestions({\n            loading: false,\n            status: \"OK\",\n            data: cachedData[val].data,\n          });\n          return;\n        }\n      }\n\n      asRef.current?.getPlacePredictions(\n        { ...requestOptionsRef.current, input: val },\n        (data: Suggestion[] | null, status: Status) => {\n          setSuggestions({ loading: false, status, data: data || [] });\n\n          if (cache && status === \"OK\") {\n            cachedData[val] = {\n              data: data as Suggestion[],\n              maxAge: Date.now() + cache * 1000,\n            };\n\n            try {\n              sessionStorage.setItem(cacheKey, JSON.stringify(cachedData));\n            } catch (error) {\n              // Skip exception\n            }\n          }\n        }\n      );\n    }, debounce),\n    [cache, cacheKey, clearSuggestions, requestOptionsRef]\n  );\n\n  const setValue: SetValue = useCallback(\n    (val, shouldFetchData = true) => {\n      setVal(val);\n      if (asRef.current && shouldFetchData) fetchPredictions(val);\n    },\n    [fetchPredictions]\n  );\n\n  useEffect(() => {\n    if (!initOnMount) return () => null;\n\n    const { google } = window;\n\n    if (!googleMapsRef.current && !google?.maps && callbackName) {\n      (window as any)[callbackName] = init;\n    } else {\n      init();\n    }\n\n    return () => {\n      // @ts-ignore\n      if ((window as any)[callbackName]) delete (window as any)[callbackName];\n    };\n  }, [callbackName, googleMapsRef, init, initOnMount]);\n\n  return {\n    ready,\n    value,\n    suggestions,\n    setValue,\n    clearSuggestions,\n    clearCache,\n    init,\n  };\n};\n\nexport default usePlacesAutocomplete;\n","/* eslint-disable compat/compat */\n\ntype GeoArgs = google.maps.GeocoderRequest;\n\ntype GeocodeResult = google.maps.GeocoderResult;\n\ntype GeoReturn = Promise<GeocodeResult[] | null>;\n\nexport const geocodeErr =\n  \"ðŸ’¡ use-places-autocomplete: Please provide an address when using getGeocode() with the componentRestrictions.\";\n\nexport const getGeocode = (args: GeoArgs): GeoReturn => {\n  const geocoder = new window.google.maps.Geocoder();\n\n  return new Promise((resolve, reject) => {\n    geocoder.geocode(args, (results, status) => {\n      if (status !== \"OK\") reject(status);\n      if (!args.address && args.componentRestrictions) {\n        console.error(geocodeErr);\n        resolve(results);\n      }\n      resolve(results);\n    });\n  });\n};\n\ntype LatLng = { lat: number; lng: number };\n\nexport const getLatLng = (result: GeocodeResult): LatLng => {\n  const { lat, lng } = result.geometry.location;\n  return { lat: lat(), lng: lng() };\n};\n\ntype ZipCode = string | undefined;\n\nexport const getZipCode = (\n  result: GeocodeResult,\n  useShortName: false\n): ZipCode => {\n  const foundZip = result.address_components.find(({ types }) =>\n    types.includes(\"postal_code\")\n  );\n\n  if (!foundZip) return undefined;\n\n  return useShortName ? foundZip.short_name : foundZip.long_name;\n};\n\ntype GetDetailsArgs = google.maps.places.PlaceDetailsRequest;\n\ntype DetailsResult = Promise<google.maps.places.PlaceResult | null>;\n\nexport const getDetailsErr =\n  \"ðŸ’¡ use-places-autocomplete: Please provide a place Id when using getDetails() either as a string or as part of an Autocomplete Prediction.\";\n\nexport const getDetails = (args: GetDetailsArgs): DetailsResult => {\n  const PlacesService = new window.google.maps.places.PlacesService(\n    document.createElement(\"div\")\n  );\n\n  if (!args.placeId) {\n    console.error(getDetailsErr);\n    return Promise.reject(getDetailsErr);\n  }\n\n  return new Promise((resolve, reject) => {\n    PlacesService.getDetails(args, (results, status) => {\n      if (status !== \"OK\") reject(status);\n      resolve(results);\n    });\n  });\n};\n"]},"metadata":{},"sourceType":"module"}